Terminals unused in grammar

   None
   PREPROCESSOR
   COMMA
   POINTER
   NUMBER
   HEX
   OCTAL
   FLOAT_LITERAL
   int_NUM
   DIGIT
   WHITESPACE
   NEWLINE
   AUTO
   BREAK
   CASE
   CHAR
   CONST
   CONTINUE
   DEFAULT
   DO
   DOUBLE
   ELSE
   ENUM
   EXTERN
   FLOAT
   FOR
   GOTO
   IF
   LONG
   REGISTER
   RETURN
   SHORT
   SIGNED
   SIZEOF
   STATIC
   STRUCT
   SWITCH
   TYPEDEF
   UNION
   UNSIGNED
   VOID
   VOLATILE
   WHILE
   SIGNED_CHAR
   UNSIGNED_CHAR
   UNSIGNED_SHORT
   UNSIGNED_INT
   UNSIGNED_LONG
   LONG_DOUBLE
   LONG_LONG
   UNSIGNED_LONG_LONG
   INTMAX_T
   UINTMAX_T
   LROUND
   RROUND
   LSQUARE
   RSQUARE
   LCURLY
   RCURLY
   DOT_OP
   POINTER_OP
   LOGICAL_NOT_OP
   BITWISE_NOT_OP
   PLUS_OP
   MINUS_OP
   INC_OP
   DEC_OP
   MULT
   DIV
   MODULUS_OP
   SHIFT_LEFT_OP
   SHIFT_RIGHT_OP
   LT
   GT
   LE
   GE
   EQ
   NOT_EQ
   AND
   XOR
   OR
   LOG_AND
   LOG_OR
   COND_OP
   ASSIGN_OP
   SHRT_ASSIGNPLUS
   SHRT_ASSIGNMINUS
   SHRT_ASSIGNMULT
   SHRT_ASSIGNMOD
   SHRT_ASSIGNAND
   SHRT_ASSIGNOR
   SHRT_ASSIGNXOR
   SHRT_ASSIGNLSHIFT
   SHRT_ASSIGNRSHIFT
   STRING_LITERAL
   COMMENT


Grammar

    0 $accept: ROOT $end

    1 ROOT: STATEMENT

    2 STATEMENT: INT IDENTIFIER SEMICOLON


Terminals, with rules where they appear

$end (0) 0
error (256)
None (258)
SEMICOLON (259) 2
PREPROCESSOR (260)
COMMA (261)
POINTER (262)
NUMBER (263)
HEX (264)
OCTAL (265)
FLOAT_LITERAL (266)
int_NUM (267)
DIGIT (268)
IDENTIFIER (269) 2
WHITESPACE (270)
NEWLINE (271)
AUTO (272)
BREAK (273)
CASE (274)
CHAR (275)
CONST (276)
CONTINUE (277)
DEFAULT (278)
DO (279)
DOUBLE (280)
ELSE (281)
ENUM (282)
EXTERN (283)
FLOAT (284)
FOR (285)
GOTO (286)
IF (287)
INT (288) 2
LONG (289)
REGISTER (290)
RETURN (291)
SHORT (292)
SIGNED (293)
SIZEOF (294)
STATIC (295)
STRUCT (296)
SWITCH (297)
TYPEDEF (298)
UNION (299)
UNSIGNED (300)
VOID (301)
VOLATILE (302)
WHILE (303)
SIGNED_CHAR (304)
UNSIGNED_CHAR (305)
UNSIGNED_SHORT (306)
UNSIGNED_INT (307)
UNSIGNED_LONG (308)
LONG_DOUBLE (309)
LONG_LONG (310)
UNSIGNED_LONG_LONG (311)
INTMAX_T (312)
UINTMAX_T (313)
LROUND (314)
RROUND (315)
LSQUARE (316)
RSQUARE (317)
LCURLY (318)
RCURLY (319)
DOT_OP (320)
POINTER_OP (321)
LOGICAL_NOT_OP (322)
BITWISE_NOT_OP (323)
PLUS_OP (324)
MINUS_OP (325)
INC_OP (326)
DEC_OP (327)
MULT (328)
DIV (329)
MODULUS_OP (330)
SHIFT_LEFT_OP (331)
SHIFT_RIGHT_OP (332)
LT (333)
GT (334)
LE (335)
GE (336)
EQ (337)
NOT_EQ (338)
AND (339)
XOR (340)
OR (341)
LOG_AND (342)
LOG_OR (343)
COND_OP (344)
ASSIGN_OP (345)
SHRT_ASSIGNPLUS (346)
SHRT_ASSIGNMINUS (347)
SHRT_ASSIGNMULT (348)
SHRT_ASSIGNMOD (349)
SHRT_ASSIGNAND (350)
SHRT_ASSIGNOR (351)
SHRT_ASSIGNXOR (352)
SHRT_ASSIGNLSHIFT (353)
SHRT_ASSIGNRSHIFT (354)
STRING_LITERAL (355)
COMMENT (356)


Nonterminals, with rules where they appear

$accept (102)
    on left: 0
ROOT (103)
    on left: 1, on right: 0
STATEMENT (104)
    on left: 2, on right: 1


State 0

    0 $accept: . ROOT $end

    INT  shift, and go to state 1

    ROOT       go to state 2
    STATEMENT  go to state 3


State 1

    2 STATEMENT: INT . IDENTIFIER SEMICOLON

    IDENTIFIER  shift, and go to state 4


State 2

    0 $accept: ROOT . $end

    $end  shift, and go to state 5


State 3

    1 ROOT: STATEMENT .

    $default  reduce using rule 1 (ROOT)


State 4

    2 STATEMENT: INT IDENTIFIER . SEMICOLON

    SEMICOLON  shift, and go to state 6


State 5

    0 $accept: ROOT $end .

    $default  accept


State 6

    2 STATEMENT: INT IDENTIFIER SEMICOLON .

    $default  reduce using rule 2 (STATEMENT)
